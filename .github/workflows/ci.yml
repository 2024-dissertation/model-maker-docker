name: Model Maker CI
# credit: https://github.com/pressly/goose/blob/main/.github/workflows/ci.yaml

on:
  push:
    branches:
      - main
      - develop
  pull_request:

concurrency:
  group: "pages"
  cancel-in-progress: true

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  test:
    name: Run unit tests
    timeout-minutes: 10

    strategy:
      matrix:
        go-version: [oldstable, stable]
        os: [ubuntu-latest]

    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: changeme
          POSTGRES_DB: appdb_test
        options: >-
          --health-cmd="pg_isready -U postgres -d appdb_test"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install Go
        uses: actions/setup-go@v5.4.0
      - name: Install Go Tools
        run: |
          go install github.com/joho/godotenv/cmd/godotenv@latest && \
          go install github.com/nikolaydubina/go-cover-treemap@latest
      - name: Wait for PostgreSQL to be ready
        run: |
          for i in {1..10}; do
            if pg_isready -h localhost -p 5432 -U testuser -d testdb; then
              echo "PostgreSQL is ready"
              break
            fi
            echo "Waiting for PostgreSQL..."
            sleep 5
          done
      - name: Check Go code formatting
        run: |
          cd app
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            gofmt -s -l .
            echo "Please format Go code by running: go fmt ./..."
            exit 1
          fi
      - name: Install tparse
        run: go install github.com/mfridman/tparse@main
      - name: Run tests
        env:
          POSTGRES_HOST: localhost
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: changeme
          POSTGRES_DB: appdb_test
        run: |
          cd app
          mkdir build
          go vet ./...
          go build ./...
          make test-packages
          make test-cover
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: "./cover"

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
